{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","index.js"],"names":["App","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","Calculator","React","Component","state","count","keys","key","keyclass","number","name","_this","setState","prevState","eval","join","concat","Object","_Users_codenation_Documents_calculator_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","_this2","this","className","map","onClick","module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0+CA0BMA,+wBAGF,OACEC,2CAAAC,EAAAC,cAAA,WACIF,2CAAAC,EAAAC,cAACC,WAAD,cALQC,6CAAMC,WAWlBF,+sBACJG,MAAQ,CACNC,MAAO,GACPC,KAAM,CACJ,CAACC,IAAK,QAASC,SAAU,eACzB,CAACD,IAAK,IAAKC,SAAU,kBACrB,CAACD,IAAK,IAAKC,SAAU,gBACrB,CAACD,IAAK,IAAKC,SAAU,gBACrB,CAACD,IAAK,IAAKC,SAAU,gBACrB,CAACD,IAAK,IAAKC,SAAU,kBACrB,CAACD,IAAK,IAAKC,SAAU,gBACrB,CAACD,IAAK,IAAKC,SAAU,gBACrB,CAACD,IAAK,IAAKC,SAAU,gBACrB,CAACD,IAAK,IAAKC,SAAU,kBACrB,CAACD,IAAK,IAAKC,SAAU,gBACrB,CAACD,IAAK,IAAKC,SAAU,gBACrB,CAACD,IAAK,IAAKC,SAAU,gBACrB,CAACD,IAAK,IAAKC,SAAU,kBACrB,CAACD,IAAK,IAAKC,SAAU,qBACrB,CAACD,IAAK,IAAKC,SAAU,0BAIzBC,OAAS,SAAAC,MACM,UAATA,KACFC,MAAKC,SAAS,CAAEP,MAAO,KAEP,MAATK,KACPC,MAAKC,SAAS,SAAAC,WAAS,MAAK,CAC1BR,MAAO,CAACS,KAAKD,UAAUR,MAAMU,KAAK,SAIpCJ,MAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BR,MAAK,GAAAW,OAAAC,OAAAC,6HAAA,EAAAD,CAAMJ,EAAUR,OAAhB,CAAuBK,gWAK1B,IAAAS,EAAAC,KACN,OACEtB,2CAAAC,EAAAC,cAAA,OAAKqB,UAAU,WACfvB,2CAAAC,EAAAC,cAAA,OAAKqB,UAAU,cACfvB,2CAAAC,EAAAC,cAAA,aAAKoB,KAAKhB,MAAMC,MAAhB,KACAP,2CAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,2CAAAC,EAAAC,cAAA,OAAKqB,UAAU,UACZD,KAAKhB,MAAME,KAAKgB,IAAI,SAAAhB,GACnB,OACER,2CAAAC,EAAAC,cAAA,UAAQqB,UAAWf,EAAKE,SAAUe,QAAS,kBAAMJ,EAAKV,OAAOH,EAAKC,OAAlE,IAA0ED,EAAKC,IAA/E,2BAhDWL,6CAAMC,WA8DhBN,mGCnGf2B,EAAAC,QAAiBC,EAAAC,EAAuB,2ICYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAApC,EAAAC,cAACH,EAAA,EAAD,MAASuC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4952c4d.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n      \n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\nclass App extends React.Component {\n\n  render(){\n    return(\n      <div>\n          <Calculator />\n      </div>\n    )\n  }\n}\n\nclass Calculator extends React.Component{\n  state = {\n    count: [],\n    keys: [\n      {key: \"Clear\", keyclass: \"clearButton\"},\n      {key: \"/\", keyclass: \"operatorButton\"},\n      {key: \"7\", keyclass: \"numberButton\"},\n      {key: \"8\", keyclass: \"numberButton\"},\n      {key: \"9\", keyclass: \"numberButton\"},\n      {key: \"*\", keyclass: \"operatorButton\"},\n      {key: \"4\", keyclass: \"numberButton\"},\n      {key: \"5\", keyclass: \"numberButton\"},\n      {key: \"6\", keyclass: \"numberButton\"},\n      {key: \"-\", keyclass: \"operatorButton\"},\n      {key: \"1\", keyclass: \"numberButton\"},\n      {key: \"2\", keyclass: \"numberButton\"},\n      {key: \"3\", keyclass: \"numberButton\"},\n      {key: \"+\", keyclass: \"operatorButton\"},\n      {key: \"0\", keyclass: \"numberButton zero\"},\n      {key: \"=\", keyclass: \"operatorButton\"},\n    ]\n  }\n\n  number = name => {\n    if (name === \"Clear\"){\n      this.setState({ count: [] })\n    }\n    else if (name === \"=\"){\n      this.setState(prevState => ({\n        count: [eval(prevState.count.join(\"\"))]\n      }))\n     \n    } else {\n      this.setState(prevState => ({\n        count: [...prevState.count, name]\n      }))\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"wrapper\">\n      <div className=\"Calculator\">\n      <p> {this.state.count} </p>\n      <div className=\"row\">\n        <div className=\"Keypad\"> \n          {this.state.keys.map(keys =>{\n            return(\n              <button className={keys.keyclass} onClick={() => this.number(keys.key)}> {keys.key} </button>\n            )\n          })}\n          </div>\n        </div>\n      </div>\n      </div>\n    )\n\n  }\n}\n\n\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}